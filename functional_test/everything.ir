%S = type {
    i32,
    i32
}

fn reduce(%s: S) -> i32 {
    %0 = loadfield i32 %s, 0
    %1 = loadfield i32 %s, 1
    %2 = add i32 %0, %1
    ret %2
}

@g = global i32 100

fn add(%a: i32, %b: i32) -> i32 {
    %0 = add i32 %a, %b
    ret %0
}

fn main() -> () {
    %1 = alloca i32
    store i32 1, address %1
    %2 = alloca i32
    store i32 2, address %2
    %3 = alloca i32
    %4 = load i32 %1
    %5 = load i32 %2
    %6 = add i32 %3, %4
WHILE_0_JUDGE:
    %7 = load i32 @g
    blt 0, %7, WHILE_0_TRUE, WHILE_0_FALSE
WHILE_0_TRUE:
    %8 = load i32 %3
    %9 = load i32 %1
    %10 = sub i32 %8, %9
    %11 = load i32 @g
    %12 = sub i32 %11, 1
    store i32 %12, address @g
    j WHILE_0_JUDGE
WHILE_0_FALSE:
    %13 = load i32 @g
    blt 0, %13, IF_0_TRUE, IF_0_FALSE
IF_0_TRUE:
    %14 = load i32 %1
    store i32 %14, address %2
    j IF_0_END
IF_0_FALSE:
    %14 = load i32 %1
    store i32 %14, address %2
    j IF_0_END
IF_0_END:
    ret
}